pipeline {
    agent any
    tools{
        jdk "jdk17"
        nodejs "node16"
    }
    environment{
        SCANNER_HOME = tool 'sonar-scanner'
        APP_NAME = "reddit-clone"
        RELEASE = "1.0.0"
        DOCKER_USER = "mukeshr29"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = 'mukeshr29/reddit-clone'
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }
    stages{
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('git checkout'){
            steps{
                git credentialsId: 'github', url: 'https://github.com/mukeshr-29/project-25-redit-clone-ter-jen-kube.git'
            }
        }
        stage('static code analysis'){
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonarqube', installationName:'sonar-server'){
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=redit-clone \
                            -Dsonar.projectName=redit-clone
                        '''
                    }
                }
            }
        }
        stage('quality gate check'){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
                }
            }
        }
        stage('install required dependencies'){
            steps{
                sh 'npm install'
            }
        }
        stage('OWASP file SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dp-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('trivy file scan'){
            steps{
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage('docker build & push'){
            steps {
                script {
                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                    }
                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                        
                    }
                }
            }
        }
        stage('trivy image scan'){
            steps{
                sh 'trivy image mukeshr29/reddit-clone:latest > trivyimg.txt'
            }
        }
        stage('clean image locally'){
            steps{
                script{
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }
        stage('trigger cd build'){
            steps{
                script{
                    sh "curl -v -k --user mukesh:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' 'http://3.84.168.33:8080/job/redit-clone-cd/buildWithParameters?token=gitops-token'"
                }
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'mukeshr2911@gmail.com',                              
                attachmentsPattern: 'trivyfs.txt,trivyimg.txt'
            
        }
    }
}

